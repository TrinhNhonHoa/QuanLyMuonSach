const express = require("express");
const DocGia = require("../models/DocGia");

const router = express.Router();

// üìå L·∫•y danh s√°ch t·∫•t c·∫£ ƒë·ªçc gi·∫£
router.get("/", async (req, res) => {
    try {
        const docGiaList = await DocGia.find();
        res.status(200).json(docGiaList);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch ƒë·ªçc gi·∫£", error });
    }
});

// üìå T√¨m ƒë·ªçc gi·∫£ theo M√£ ƒê·ªçc Gi·∫£ (MaDocGia)
router.get("/search/:maDocGia", async (req, res) => {
    try {
        const docGia = await DocGia.findOne({ MaDocGia: req.params.maDocGia });
        if (!docGia) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë·ªçc gi·∫£!" });
        }
        res.status(200).json(docGia);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server khi t√¨m ƒë·ªçc gi·∫£!", error });
    }
});

// üìå T√¨m ƒë·ªçc gi·∫£ theo ID
router.get("/search/:maDocGia", async (req, res) => {
    try {
        const docGia = await DocGia.findOne({ MaDocGia: req.params.maDocGia });
        if (!docGia) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë·ªçc gi·∫£" });
        }
        res.status(200).json(docGia);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});



// üìå Th√™m ƒë·ªçc gi·∫£ m·ªõi (Ki·ªÉm tra MaDocGia ƒë√£ t·ªìn t·∫°i ch∆∞a)
router.post("/", async (req, res) => {
    try {
        const { MaDocGia, HoLot, Ten, NgaySinh, Phai, DiaChi, DienThoai } = req.body;

        // Ki·ªÉm tra n·∫øu MaDocGia ƒë√£ t·ªìn t·∫°i
        const existingDocGia = await DocGia.findOne({ MaDocGia });
        if (existingDocGia) {
            return res.status(400).json({ message: "M√£ ƒê·ªçc Gi·∫£ ƒë√£ t·ªìn t·∫°i!" });
        }

        const newDocGia = new DocGia({ MaDocGia, HoLot, Ten, NgaySinh, Phai, DiaChi, DienThoai });
        await newDocGia.save();
        res.status(201).json({ message: "Th√™m ƒë·ªçc gi·∫£ th√†nh c√¥ng!", docGia: newDocGia });
    } catch (error) {
        res.status(400).json({ message: "L·ªói khi th√™m ƒë·ªçc gi·∫£!", error });
    }
});

// C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªçc gi·∫£ theo MaDocGia
router.put("/:MaDocGia", async (req, res) => {
    try {
        const { MaDocGia } = req.params;
        const updatedDocGia = await DocGia.findOneAndUpdate({ MaDocGia }, req.body, { new: true });

        if (!updatedDocGia) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë·ªçc gi·∫£ ƒë·ªÉ c·∫≠p nh·∫≠t" });
        }
        res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", docGia: updatedDocGia });
    } catch (error) {
        res.status(400).json({ message: "L·ªói khi c·∫≠p nh·∫≠t ƒë·ªçc gi·∫£", error });
    }
});


// üìå X√≥a ƒë·ªçc gi·∫£ (Ki·ªÉm tra ID h·ª£p l·ªá)
router.delete("/:id", async (req, res) => {
    try {
        const deletedDocGia = await DocGia.findOneAndDelete({ MaDocGia: req.params.id });
        if (!deletedDocGia) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë·ªçc gi·∫£ ƒë·ªÉ x√≥a" });
        }
        res.status(200).json({ message: "X√≥a th√†nh c√¥ng!" });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});


module.exports = router;
