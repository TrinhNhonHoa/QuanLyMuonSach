const express = require("express");
const bcrypt = require("bcryptjs");
const router = express.Router();
const NhanVien = require("../models/NhanVien");
const { verifyRole } = require("../middleware/authMiddleware");

// üìå API ƒêƒÉng k√Ω nh√¢n vi√™n (Th√™m nh√¢n vi√™n m·ªõi)
router.post("/register", verifyRole("Qu·∫£n L√Ω"), async (req, res) => {
  try {
    const { MSNV, hotenNV, password, chucVu, diaChi, soDienThoai } = req.body;

    // üîπ Ki·ªÉm tra n·∫øu thi·∫øu th√¥ng tin
    if (!MSNV || !hotenNV || !password || !chucVu || !diaChi || !soDienThoai) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!" });
    }

    // üîπ Ki·ªÉm tra ch·ª©c v·ª• h·ª£p l·ªá
    if (!["Nh√¢n Vi√™n", "Qu·∫£n L√Ω"].includes(chucVu)) {
      return res.status(400).json({ message: "Ch·ª©c v·ª• kh√¥ng h·ª£p l·ªá!" });
    }

    // üîπ Ki·ªÉm tra n·∫øu MSNV ƒë√£ t·ªìn t·∫°i
    const existingNhanVien = await NhanVien.findOne({ MSNV });
    if (existingNhanVien) {
      return res.status(400).json({ message: "M√£ s·ªë nh√¢n vi√™n ƒë√£ t·ªìn t·∫°i!" });
    }

    // üîπ M√£ h√≥a m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u
    const hashedPassword = await bcrypt.hash(password, 10);

    // üîπ T·∫°o nh√¢n vi√™n m·ªõi
    const newNhanVien = new NhanVien({
      MSNV,
      hotenNV,
      password: hashedPassword,
      chucVu,
      diaChi,
      soDienThoai
    });

    await newNhanVien.save();
    res.status(201).json({ message: "Th√™m nh√¢n vi√™n th√†nh c√¥ng!", nhanVien: newNhanVien });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
});

// üìå API ƒêƒÉng nh·∫≠p nh√¢n vi√™n
router.post("/login", async (req, res) => {
  try {
    const { MSNV, password } = req.body;

    // üîπ Ki·ªÉm tra xem nh√¢n vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
    const nhanVien = await NhanVien.findOne({ MSNV });
    if (!nhanVien) {
      return res.status(404).json({ message: "Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i!" });
    }

    // üîπ Ki·ªÉm tra m·∫≠t kh·∫©u
    const isMatch = await bcrypt.compare(password, nhanVien.password);
    if (!isMatch) {
      return res.status(401).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!" });
    }

    // ‚úÖ Tr·∫£ v·ªÅ th√¥ng tin nh√¢n vi√™n
    res.json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
      nhanVien: {
        MSNV: nhanVien.MSNV,
        hotenNV: nhanVien.hotenNV,
        chucVu: nhanVien.chucVu,
        diaChi: nhanVien.diaChi,
        soDienThoai: nhanVien.soDienThoai,
      }
    });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
});

// üìå API L·∫•y danh s√°ch nh√¢n vi√™n (Ch·ªâ "Qu·∫£n L√Ω" m·ªõi c√≥ quy·ªÅn)
router.get("/", verifyRole("Qu·∫£n L√Ω"), async (req, res) => {
  try {
    const nhanVienList = await NhanVien.find().select("-password"); // Kh√¥ng g·ª≠i password
    res.json(nhanVienList);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
});

// üìå API L·∫•y th√¥ng tin c√° nh√¢n (T·∫•t c·∫£ nh√¢n vi√™n c√≥ th·ªÉ xem)
router.get("/me", async (req, res) => {
  try {
    const msnv = req.headers["msnv"] || req.headers["MSNV"];
    if (!msnv) return res.status(403).json({ message: "Vui l√≤ng cung c·∫•p MSNV!" });

    const nhanVien = await NhanVien.findOne({ MSNV: msnv }).select("-password");
    if (!nhanVien) return res.status(404).json({ message: "Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i!" });

    res.json(nhanVien);
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
});

// üìå API X√≥a nh√¢n vi√™n (Ch·ªâ "Qu·∫£n L√Ω" m·ªõi c√≥ quy·ªÅn)
router.delete("/:id", verifyRole("Qu·∫£n L√Ω"), async (req, res) => {
  try {
    const nhanVien = await NhanVien.findByIdAndDelete(req.params.id);
    if (!nhanVien) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n!" });
    }
    res.json({ message: "X√≥a nh√¢n vi√™n th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
});

// üìå C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n
router.put("/:MSNV", async (req, res) => {
  try {
    const { hotenNV, chucVu, diaChi, soDienThoai, password } = req.body;
    const { MSNV } = req.params;

    // T√¨m nh√¢n vi√™n theo MSNV
    let nhanVien = await NhanVien.findOne({ MSNV });
    if (!nhanVien) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√¢n vi√™n!" });
    }

    // N·∫øu c√≥ m·∫≠t kh·∫©u m·ªõi, m√£ h√≥a l·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    if (password) {
      const hashedPassword = await bcrypt.hash(password, 10);
      nhanVien.password = hashedPassword;
    }

    // C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n
    nhanVien.hotenNV = hotenNV || nhanVien.hotenNV;
    nhanVien.chucVu = chucVu || nhanVien.chucVu;
    nhanVien.diaChi = diaChi || nhanVien.diaChi;
    nhanVien.soDienThoai = soDienThoai || nhanVien.soDienThoai;

    // L∆∞u thay ƒë·ªïi
    await nhanVien.save();

    res.json({ message: "C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n th√†nh c√¥ng!", nhanVien });
  } catch (error) {
    res.status(500).json({ message: "L·ªói server", error });
  }
});

module.exports = router;
